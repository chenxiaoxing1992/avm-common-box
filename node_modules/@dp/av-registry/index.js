var Dep = require("@dp/av-dep");
var Request = require("request");
var readPkg = require("read-pkg");
var Log =  require("@dp/log");
var fs = require("fs");
var gulpFilePath = "./gulpfile.js";

var registryUrl = (function(){
	return process.env.ENV == "ppe" ? "http://ppegmkt.activ.dianping.com/component/preserve":
		process.env.ENV == "product" ? "http://gmkt.activ.dianping.com/component/preserve" : 
			"http://gmkt.activ.51ping.com/component/preserve"
})();


var PreFix = require("@dp/av-prefix");

function isObject(obj){
	return Object.prototype.toString.call(obj).indexOf("object Object") !== -1 ? true : false;
}
function isArray(obj){
	return Object.prototype.toString.call(obj).indexOf("object Array") !== -1 ? true : false;
}
function isString(str){
	return Object.prototype.toString.call(str).indexOf("object String") !== -1 ? true : false;
}

// config 匹配校验器
var CONFIG_TYPE = [];
function _extendConfig(obj){
	if(isArray(obj)){
		obj.forEach(function(it){
			_extendConfig(it);
		})
	}else{
		CONFIG_TYPE.push(obj.name);
		CONFIG_TYPE[obj.name] = function(param){

			// 共性属性继承
			if(!(typeof param["required"] != "undefined"  || typeof param["required"] != "boolean")){
				Log.warn(`${param.name}的required属性必须为boolean值`);
				return false;
			}
			if(["max","min","width","height"].some(function(key){
				var value = param[key]; 

				if(!value){
					return false;
				}

				if(typeof value == "number" && value > 0){
					return false;
				}else{
					Log.warn(`${param.name}的${key}属性必须为大于0数字`);
					return true;
				}
			})){
				return false;
			}
			return obj.fn.apply(null,arguments);
		}
	}
}

_extendConfig([
	// int 校验
	{
		name:"int",
		fn:function(obj){
			var defaultValue = obj.default;
			if(defaultValue){
				if(!obj.max || (obj.max && defaultValue <= obj.max)){
					if(!obj.min || (obj.min && defaultValue <= obj.min)){
						return true;
					}else{
						Log.warn(`${obj.name}的默认值必须不小于${obj.min}`);
						return false;
					}
				}else{
					Log.warn(`${obj.name}的默认值必须不大于${obj.max}`);
					return false;
				}
			}else{
				return true;
			}
		}
	},{
		name:"boolean",
		fn:function(obj){
			var defaultValue = obj.default;
			return !defaultValue ?  true : 
					typeof defaultValue == "boolean" ? true : (Log.warn(`${obj.name}默认值必须为boolean类型`),false);
		}
	},{
		name:"text",
		fn:function(obj){
			var defaultValue = obj["default"];
			var length = defaultValue && defaultValue.length || 0;
			if(defaultValue){
				if(!obj.max || (obj.max && length <= obj.max)){
					if(!obj.max || (obj.min && length <= obj.min)){
						return true;
					}else{
						Log.warn(`${obj.name}的默认值长度必须不小于${obj.min}`);
						return false;
					}
				}else{
					Log.warn(`${obj.name}的默认值长度必须不大于${obj.max}`);
					return false;
				}
			}else{
				return true;
			}
		}
	},{
		name:"array",
		fn:function(obj){
			if(obj.subFields&&obj.subFields.length){
				return true;
			}else{
				Log.warn(`${obj.name}的subFields属性不能为空`);
				return false;
			}
		}
	},{
		name:"object",
		fn:function(obj){
			if(obj.subFields&&obj.subFields.length){
				return true;
			}else{
				Log.warn(`${obj.name}的subFields属性不能为空`);
				return false;
			}
		}
	},{
		name:"image",
		fn:function(val,obj){
			return true;
		}
	},{
		name:"color",
		fn:function(val,obj){
			return true;
		}
	},{
		name:"tab",
		fn:function(val,obj){
			return true;
		}
	},{
		name:"time",
		fn:function(val,obj){
			return true;
		}
	},{
		name:"datetime",
		fn:function(val,obj){
			return true;
		}
	},{
		name:"map",
		fn:function(val,obj){
			return true;
		}
	}
])


// 校验
var pkgVerify = {
	// 容器
	tpl:function(val){
		return true;
	},
	// 模块名称
	title:function(val){
		if(val){
			return true
		}else{
			Log.warn(`模块title不能为空`);
			return false;
		}
	},
	// 配置
	config:function(val){
		// 没有,放过
		if(!val || !val.length)
			return true;
		
		if(!isArray(val)){
			Log.warn(`config必须是一个数组`);
			return false;
		}

		function _walk(item){
			// 数组遍历
			if(isArray(item)){
				return !item.some(function(it){
					return  !_walk(it);
				})
			}else{
				// name和id不能为空
				if(item["name"] && item["id"]){
					// type必须是标准值
					if(~CONFIG_TYPE.indexOf(item.type)){
						if(!CONFIG_TYPE[item.type].call(null,item)){
							return false;
						}
					}else{
						Log.warn(`${item.name}中type只能为${CONFIG_TYPE.toString()}`);
						return false;
					}
					// 有子元素数组遍历
					if(item.subFields&&item.subFields.length){
						if(!_walk(item.subFields)){
							return false;
						}
					}
					// 成功
					return true;

				}else{
					Log.warn("config中`id`和`name`不能为空");
					return false;
				}
			}
		}
		return _walk(val);
	},
	// 模块内容
	type:function(val){
		if(val == "module" ? true :
				val == "lib" ? true : 
					val == "private" ? true : false
		){
			return true;
		}else{
			Log.warn("type只能为`module`,`lib`,`private`");
			return false;
		}
	},
	// 模块名
	name:function(val){
		var self = this;
		var type = this.type;
		if(type == "module"){
			return PreFix.module&&val.indexOf(PreFix.module) == 0 ? true : (Log.warn(`module类型组件要以${PreFix.module}开头`),false);
		}else if(type == "lib"){
			return PreFix.lib&&val.indexOf(PreFix.lib) == 0 ? true : (Log.warn(`lib类型组件要以${PreFix.lib}开头`),false);
		}else{
			return false;
		}
	},
	keywords:function(val){
		if(val){
			return true;
		}else{
			Log.warn(`模块keywords不能为空`);
			return false;
		}
	}
}


function _formatParams(data) {
    var arr = [];
    for (var name in data) {
        arr.push(
        	name + '=' + encodeURIComponent(
        		isString(data[name]) ? data[name] : JSON.stringify(data[name])
        	)
        );
    }
    return arr.join('&');
}

module.exports = (cb) => {
  	// 参数集合
  	var param = {};

  	var pkg = readPkg.sync("./package.json");

  	// pkg 重要属性校验集成
  	for(var key in pkgVerify){
	 	if(!pkgVerify[key].call(pkg,pkg[key])){
	 		Log.error(`${key}校验失败`);
	 	}
	 	if(key == "keywords"){
	 		param["keyword"] = pkg[key].join(",");
	 	}else{
		 	param[key] = pkg[key];
	 	}
  	}
  	if(fs.existsSync(gulpFilePath)){
		var content = fs.readFileSync(gulpFilePath,"UTF-8");
		var dep = Dep.read(content) || {};
		param["dep"] = Object.keys(dep).join(",") || "";
	}else{
		Log.error(`${gulpFilePath}文件不存在`);
	}
	Log.success("校验成功");
	param["callback"] = +new Date();
	
	Request.get(registryUrl+"?"+_formatParams(param),function(err,res,body){
		if(err){
			Log.error(err);
		}
		body = JSON.parse(body);
		if(body.code == 100){
			Log.success("组件注册成功");
			cb();
		}else{
			Log.error(body.msg);
		}
	});
}