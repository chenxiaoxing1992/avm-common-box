var UglifyJS = require("uglify-js");
var EXTERNALS_KEY = "externals";
var WEBPACK_KEY = "webpack";
var transformer = function(opts){
	return new UglifyJS.TreeTransformer(null, function(node){
	   if(node instanceof UglifyJS.AST_Call && node.expression.name == WEBPACK_KEY ){
	   		var webpackArgs = node.args[0].properties;
	   		webpackArgs.some(function(item,index){
	   			if(item.key == EXTERNALS_KEY){
	   				var  externalsArgs= item.value.properties;
	   				var isExist = false;
	   				
	   				if(!externalsArgs){
	   					console.log("tip: externals is object!");
	   					return ;
	   				}

	   				externalsArgs.map(function(it,key){
	   					if(it.key == opts.key){
	   						isExist = true;
	   						it.value = new UglifyJS.AST_String({
	   							value:opts.value
	   						});
	   					}
	   					return it;
	   				})
	   				// 不存在,新扩展
	   				if(!isExist){
	   					externalsArgs.push(
	   						new UglifyJS.AST_ObjectKeyVal({
	   							key:opts.key,
	   							value:new UglifyJS.AST_String({
	   								value:opts.value
	   							})
	   						})
	   					);
	   				}
	   				return true;
	   			}else if(index == webpackArgs.length-1){
	   				webpackArgs.push(
	   					new UglifyJS.AST_ObjectKeyVal({
   							key:EXTERNALS_KEY,
   							value:new UglifyJS.AST_Object({
								properties:[
									new UglifyJS.AST_ObjectKeyVal({
			   							key:opts.key,
			   							value:new UglifyJS.AST_String({
			   								value:opts.value
			   							})
			   						})
			   					]
		   					})
   						})
	   				)
	   				return true;
	   			}else{
	   				return false;
	   			}
	   		})
	   		return node;
	   	}
	});
}

module.exports = function(content,opts){
	var ast = UglifyJS.parse(content);
	var ast2 = ast.transform(transformer(opts));
	return ast2.print_to_string({ beautify: true });
}


