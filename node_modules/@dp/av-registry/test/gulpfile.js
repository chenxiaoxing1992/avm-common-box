var gulp = require("gulp");

var webpack = require("webpack");

var path = require("path");

var rootDir = "/av-crm/module/common-card/";

var RESOURCE_SERVER_URL = "neocortex-4j.static.resourceServer";

var isDev = !process.env.ENV || process.env.ENV == "dev";

var clean = require("gulp-clean");

var tpl = require("gulp-tpl2mod");

var runSequence = require("run-sequence").use(gulp);

var imgPrefix = "[path]";

gulp.task("build", function(callback) {
    function _action() {
        webpack({
            devtool: isDev ? "" : "source-map",
            entry: [ "./js/index.js" ],
            output: {
                path: "./dist",
                filename: "bundle.js"
            },
            plugins: [ !isDev ? new webpack.optimize.UglifyJsPlugin({
                compress: {
                    warnings: false
                }
            }) : function() {} ],
            resolve: {
                extensions: [ "", ".js" ]
            },
            module: {
                loaders: [ {
                    test: /\.less$/,
                    loaders: [ "style", "css", "less" ]
                }, {
                    test: /\.css$/,
                    loaders: [ "style", "css" ]
                }, {
                    test: /\.(png|jpg|svg|ttf|eot|woff|woff2)$/,
                    loader: "url?name=" + imgPrefix + "[name].[ext]"
                }, {
                    test: /\.jsx$/,
                    loaders: [ "babel", "jsx" ]
                }, {
                    test: /\.js$/,
                    loaders: [ "babel" ]
                } ]
            },
            externals: {
                zepto: "Zepto",
                underscore: "Underscore",
                toast: "Toast",
                url: "Url",
                env: "Env",
                dpapp: "DPApp"
            }
        }, function(err, stats) {
            if (err) {
                console.log(err);
                process.exit(-1);
            }
            callback();
        });
    }
    function _resourceServerSanitizer(v) {
        if (v.indexOf("[") == 0) {
            return JSON.parse(v);
        }
        return [ v.split(",") ];
    }
    if (!isDev) {
        process.env.NODE_LION_ENV = process.env.ENV == "beta" ? "qa" : process.env.ENV;
        var lion = require("@dp/lion")();
        lion.get(RESOURCE_SERVER_URL, function(err, value) {
            if (err) {
                console.error(err);
                process.exit(1);
            }
            var resourceHost = _resourceServerSanitizer(value)[0][0];
            imgPrefix = resourceHost + rootDir + "[path]";
            _action();
        });
    } else {
        _action();
    }
});

gulp.task("clean", function(cb) {
    gulp.src("./dist").pipe(clean()).on("end", function() {
        cb();
    });
});

gulp.task("tpl2mod", function(cb) {
    gulp.src(path.join(__dirname, "./js/**/*.html")).pipe(tpl({
        prefix: "module.exports=",
        suffix: ";"
    })).pipe(gulp.dest("./js")).on("end", function() {
        cb();
    });
});

gulp.task("start", function() {
    runSequence("tpl2mod", "build");
});

gulp.task("default", [ "clean", "start" ]);